@login_required(login_url='login')
def home(request):
    

    if request.method == 'GET':
        if 'sidebar_submit' in request.GET: 
            print("link one")
        if 'modal_submit' in request.GET:
            print("link two")
 



    today = date.today()
    start_date = request.GET.get('start_date')
    end_date = request.GET.get('end_date')
    end_date_datetime = ""

    if start_date is None or end_date is None or start_date is "" or end_date is "":
        date_range_label = f"Transactions for {datetime.today().date().strftime('%B %d, %Y')}"
        start_date = today
        end_date = today
    else:
        
        start_date = request.GET.get('start_date')
        start_date_datetime = datetime.strptime(start_date, '%Y-%m-%d')
        start_date_formatted = start_date_datetime.strftime('%B %d, %Y')  

        end_date = request.GET.get('end_date')
        end_date_datetime = datetime.strptime(end_date, '%Y-%m-%d')
        end_date_formatted = end_date_datetime.strftime('%B %d, %Y')

        date_range_label = f"Transactions for {start_date_formatted} to {end_date_formatted}"
    
    

    
    result = request.GET.get('employee_name')
    # print("result: ", result)
    # if result is not None:
    #     print(result)
    #     sout = SoOut.objects.filter(Q(co_date__range=[start_date, end_date]) and Q(co_fk_em_id_key__em_name__icontains=result)) 
    #     print("Counted Rows:" ,sout.count())
    # else: 
    #     sout = SoOut.objects.filter(Q(co_date__range=[start_date, end_date]))




    if request.method == 'GET':
        if 'modal_submit' in request.GET: 
            print("link one")
            if result is not None: 
                sout = SoOut.objects.filter(Q(co_date__range=[start_date, end_date]) and Q(co_fk_em_id_key__em_name__icontains=result)) 
                print("Counted Rows:" ,sout.count())
        else: 
            sout = SoOut.objects.filter(Q(co_date__range=[start_date, end_date]))
        if 'sidebar_submit' in request.GET:
            sout = SoOut.objects.filter(Q(co_date__range=[start_date, end_date]))
            print("link two")




    # employee_name = request.GET.get('employee_name')

    # if employee_name:
    #     sout = SoOut.objects.filter(Q(co_date__range=[start_date, end_date]) and Q(co_fk_em_id_key__em_name__exact=employee_name))
    # else:
    #     sout = SoOut.objects.filter(co_date__range=[start_date, end_date], co_fk_em_id_key__em_name__isnull=False)


    #sout = SoOut.objects.all()
    sout = SoOut.objects.filter(co_date=str(today))
    sout.order_by('-co_date')

    emp = SoEmployee.objects.all()
    shift = Shift.objects.all()
    for x in shift:
        y_start = x.yellow_start
        r_start = x.red_start

    form = SoOutForm(request.POST or None, initial={'co_time_arrived': datetime.now().time(), 'co_date': date.today()}) 
    if request.method == 'POST':
        employee_name = request.POST.get('co_employee')
        print("employee name: ", employee_name)
        if form.is_valid():
            #form values
            time_arrived = form.instance.co_time_arrived 
            type = form.instance.co_fk_type_id_key.description 
            zone = form.instance.co_fk_em_id_key
           
            print("zone: ", zone)
            if zone == 2:
                time = y_start
            else:
                time = r_start  

            #get employee name from form and assign it to the instance
            employee_name = request.POST.get('co_employee') 
            form.instance.co_fk_em_id_key.em_name = employee_name

            #check type of absence
            if type == "Vacation" or type == "Call-out" or type == "Left early":
                form.instance.co_time_arrived = None
                form.instance.co_time_dif = None 
                form.save()
                messages.success(request, f"Marked as {type}")
                return redirect('home') 
            else:  
                form.save()  
                if form.instance.co_time_arrived is not None:
                    time_diff = datetime.combine(datetime.today(), time_arrived ) - datetime.combine(datetime.today(), time) 
                else:
                    time_diff = None
                form.instance.co_time_dif = str(time_diff)[0:4] 
                form.save() 
                return redirect('home') 
           
    context = {'sout': sout, 'emp': emp, 'form':form, 'date_today': datetime.today().date(),'date_range_label': date_range_label, 'date_value':str(end_date_datetime)}
    return render(request, 'home.html', context)
